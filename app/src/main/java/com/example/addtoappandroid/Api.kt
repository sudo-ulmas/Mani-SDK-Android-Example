// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ManiEnvironment(val raw: Int) {
  DEV(0),
  PROD(1);

  companion object {
    fun ofRaw(raw: Int): ManiEnvironment? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ManiResidentType(val raw: Int) {
  RESIDENT(0),
  NON_RESIDENT(1);

  companion object {
    fun ofRaw(raw: Int): ManiResidentType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Token (
  val accessToken: String? = null,
  val refreshToken: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): Token {
      val accessToken = __pigeon_list[0] as String?
      val refreshToken = __pigeon_list[1] as String?
      return Token(accessToken, refreshToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      accessToken,
      refreshToken,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HostInfo (
  val paymentSystemId: String? = null,
  val locale: String? = null,
  val pinfl: String? = null,
  val environment: ManiEnvironment? = null,
  val residentType: ManiResidentType? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): HostInfo {
      val paymentSystemId = __pigeon_list[0] as String?
      val locale = __pigeon_list[1] as String?
      val pinfl = __pigeon_list[2] as String?
      val environment = __pigeon_list[3] as ManiEnvironment?
      val residentType = __pigeon_list[4] as ManiResidentType?
      return HostInfo(paymentSystemId, locale, pinfl, environment, residentType)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      paymentSystemId,
      locale,
      pinfl,
      environment,
      residentType,
    )
  }
}
private object ApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Token.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HostInfo.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ManiEnvironment.ofRaw(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ManiResidentType.ofRaw(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Token -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is HostInfo -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is ManiEnvironment -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is ManiResidentType -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class ManiAuthApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by ManiAuthApi. */
    val codec: MessageCodec<Any?> by lazy {
      ApiPigeonCodec
    }
  }
  fun send(hostInfoArg: HostInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.mani_auth.ManiAuthApi.send$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(hostInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface HostAppApi {
  fun cancel()
  fun authSuccess(token: Token)

  companion object {
    /** The codec used by HostAppApi. */
    val codec: MessageCodec<Any?> by lazy {
      ApiPigeonCodec
    }
    /** Sets up an instance of `HostAppApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: HostAppApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mani_auth.HostAppApi.cancel$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cancel()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mani_auth.HostAppApi.authSuccess$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tokenArg = args[0] as Token
            val wrapped: List<Any?> = try {
              api.authSuccess(tokenArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
