// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.addtoappandroid;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Api {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Token {
    private @Nullable String accessToken;

    public @Nullable String getAccessToken() {
      return accessToken;
    }

    public void setAccessToken(@Nullable String setterArg) {
      this.accessToken = setterArg;
    }

    private @Nullable String refreshToken;

    public @Nullable String getRefreshToken() {
      return refreshToken;
    }

    public void setRefreshToken(@Nullable String setterArg) {
      this.refreshToken = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Token that = (Token) o;
      return Objects.equals(accessToken, that.accessToken) && Objects.equals(refreshToken, that.refreshToken);
    }

    @Override
    public int hashCode() {
      return Objects.hash(accessToken, refreshToken);
    }

    public static final class Builder {

      private @Nullable String accessToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccessToken(@Nullable String setterArg) {
        this.accessToken = setterArg;
        return this;
      }

      private @Nullable String refreshToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setRefreshToken(@Nullable String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }

      public @NonNull Token build() {
        Token pigeonReturn = new Token();
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(accessToken);
      toListResult.add(refreshToken);
      return toListResult;
    }

    static @NonNull Token fromList(@NonNull ArrayList<Object> __pigeon_list) {
      Token pigeonResult = new Token();
      Object accessToken = __pigeon_list.get(0);
      pigeonResult.setAccessToken((String) accessToken);
      Object refreshToken = __pigeon_list.get(1);
      pigeonResult.setRefreshToken((String) refreshToken);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HostInfo {
    private @Nullable String appName;

    public @Nullable String getAppName() {
      return appName;
    }

    public void setAppName(@Nullable String setterArg) {
      this.appName = setterArg;
    }

    private @Nullable String locale;

    public @Nullable String getLocale() {
      return locale;
    }

    public void setLocale(@Nullable String setterArg) {
      this.locale = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      HostInfo that = (HostInfo) o;
      return Objects.equals(appName, that.appName) && Objects.equals(locale, that.locale);
    }

    @Override
    public int hashCode() {
      return Objects.hash(appName, locale);
    }

    public static final class Builder {

      private @Nullable String appName;

      @CanIgnoreReturnValue
      public @NonNull Builder setAppName(@Nullable String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable String locale;

      @CanIgnoreReturnValue
      public @NonNull Builder setLocale(@Nullable String setterArg) {
        this.locale = setterArg;
        return this;
      }

      public @NonNull HostInfo build() {
        HostInfo pigeonReturn = new HostInfo();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setLocale(locale);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(appName);
      toListResult.add(locale);
      return toListResult;
    }

    static @NonNull HostInfo fromList(@NonNull ArrayList<Object> __pigeon_list) {
      HostInfo pigeonResult = new HostInfo();
      Object appName = __pigeon_list.get(0);
      pigeonResult.setAppName((String) appName);
      Object locale = __pigeon_list.get(1);
      pigeonResult.setLocale((String) locale);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return Token.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return HostInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Token) {
        stream.write(129);
        writeValue(stream, ((Token) value).toList());
      } else if (value instanceof HostInfo) {
        stream.write(130);
        writeValue(stream, ((HostInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class ManiAuthApi {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public ManiAuthApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public ManiAuthApi(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by ManiAuthApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void send(@NonNull HostInfo hostInfoArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.mani_auth.ManiAuthApi.send" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(hostInfoArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HostAppApi {

    void cancel();

    void authSuccess(@NonNull Token token);

    /** The codec used by HostAppApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `HostAppApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable HostAppApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable HostAppApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mani_auth.HostAppApi.cancel" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.cancel();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mani_auth.HostAppApi.authSuccess" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Token tokenArg = (Token) args.get(0);
                try {
                  api.authSuccess(tokenArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
